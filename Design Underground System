/*Time Complexity=O(1)
Space Complexity=O(P+S^2) where S is the number of stations on the network, and PP is the number of passengers making a journey concurrently during peak time
checkInData = a new HashMap (id -> startStation, checkInTime)
journeyData = a new HashMap (startStation, endStation -> total, count) */
    
class UndergroundSystem {
    private Map<Integer, Pair<String, Integer>> checkInData=new HashMap<>();
    private Map<String, Pair<Double, Double>> journeyData=new HashMap<>();
    public UndergroundSystem() {
        
    }
    
    public void checkIn(int id, String stationName, int t) {
        checkInData.put(id, new Pair<>(stationName, t));
    }
    
    public void checkOut(int id, String stationName, int t) {
        Pair<String, Integer> unpack=checkInData.get(id);
        String start=unpack.getKey();
        Integer startTime=unpack.getValue();
        
        String routeKey=getRouteKey(start, stationName);
        Pair<Double, Double> routeStats=journeyData.getOrDefault(routeKey, new Pair<>(0.0, 0.0));
        
        Double totalTime=routeStats.getKey();
        Double totalCount=routeStats.getValue();
        
        double tripTime=t-startTime;
        journeyData.put(routeKey, new Pair<>(tripTime+totalTime, totalCount+1));
    }
    
    public double getAverageTime(String startStation, String endStation) {
        String routeKey=getRouteKey(startStation, endStation);
        Double totalTime=journeyData.get(routeKey).getKey();
        Double totalCount=journeyData.get(routeKey).getValue(); 
        return totalTime/totalCount;
    }
    public String getRouteKey(String a, String b) {
        return a+"->"+b;
    }
}

/**
 * Your UndergroundSystem object will be instantiated and called as such:
 * UndergroundSystem obj = new UndergroundSystem();
 * obj.checkIn(id,stationName,t);
 * obj.checkOut(id,stationName,t);
 * double param_3 = obj.getAverageTime(startStation,endStation);
 */
